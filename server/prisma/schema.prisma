datasource postgres {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  createdAt DateTime @default(now())
  firstName String?
  id        String   @id @default(cuid())
  lastName  String?
  password  String
  roles     Json
  updatedAt DateTime @updatedAt
  username  String   @unique
}

model OrderItem {
  createdAt  DateTime @default(now())
  discount   Float?
  id         String   @id @default(cuid())
  orders     Order[]
  product    Product? @relation(fields: [productId], references: [id])
  productId  String?
  quantity   Int?
  totalPrice Int?
  updatedAt  DateTime @updatedAt
}

model Customer {
  address   Address?  @relation(fields: [addressId], references: [id])
  addressId String?
  createdAt DateTime  @default(now())
  email     String?
  firstName String?
  id        String    @id @default(cuid())
  lastName  String?
  orders    Order[]
  payments  Payment[]
  phone     String?
  updatedAt DateTime  @updatedAt
}

model Address {
  address_1 String?
  address_2 String?
  city      String?
  createdAt DateTime   @default(now())
  customers Customer[]
  id        String     @id @default(cuid())
  state     String?
  updatedAt DateTime   @updatedAt
  zip       Int?
}

model Product {
  category    Category?   @relation(fields: [categoryId], references: [id])
  categoryId  String?
  createdAt   DateTime    @default(now())
  description String?
  id          String      @id @default(cuid())
  itemPrice   Float?
  name        String?
  orderitems  OrderItem[]
  updatedAt   DateTime    @updatedAt
}

model Category {
  createdAt DateTime  @default(now())
  id        String    @id @default(cuid())
  image_url String?
  name      String?
  products  Product[]
  updatedAt DateTime  @updatedAt
}

model Order {
  createdAt     DateTime  @default(now())
  customer      Customer  @relation(fields: [customerId], references: [id])
  customerId    String
  id            String    @id @default(cuid())
  orderItem     OrderItem @relation(fields: [orderItemId], references: [id])
  orderItemId   String
  payments      Payment[]
  totalCost     Float?
  totalDiscount Float?
  updatedAt     DateTime  @updatedAt
}

model Payment {
  createdAt     DateTime   @default(now())
  customer      Customer[]
  id            String     @id @default(cuid())
  order         Order?     @relation(fields: [orderId], references: [id])
  orderId       String?
  paymentMethod String?
  totalCost     Float
  totalPaid     Float?
  updatedAt     DateTime   @updatedAt
}